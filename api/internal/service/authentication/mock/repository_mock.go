// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	ent "github.com/awesomebusiness/uinvest/ent"
	model "github.com/awesomebusiness/uinvest/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepositoryAuthentication is a mock of RepositoryAuthentication interface
type MockRepositoryAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryAuthenticationMockRecorder
}

// MockRepositoryAuthenticationMockRecorder is the mock recorder for MockRepositoryAuthentication
type MockRepositoryAuthenticationMockRecorder struct {
	mock *MockRepositoryAuthentication
}

// NewMockRepositoryAuthentication creates a new mock instance
func NewMockRepositoryAuthentication(ctrl *gomock.Controller) *MockRepositoryAuthentication {
	mock := &MockRepositoryAuthentication{ctrl: ctrl}
	mock.recorder = &MockRepositoryAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryAuthentication) EXPECT() *MockRepositoryAuthenticationMockRecorder {
	return m.recorder
}

// GetDataUser mocks base method
func (m *MockRepositoryAuthentication) GetDataUser(ctx context.Context, input model.LoginInput) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataUser", ctx, input)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataUser indicates an expected call of GetDataUser
func (mr *MockRepositoryAuthenticationMockRecorder) GetDataUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataUser", reflect.TypeOf((*MockRepositoryAuthentication)(nil).GetDataUser), ctx, input)
}

// CreateDataUser mocks base method
func (m *MockRepositoryAuthentication) CreateDataUser(ctx context.Context, input model.RegisterInput) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataUser", ctx, input)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataUser indicates an expected call of CreateDataUser
func (mr *MockRepositoryAuthenticationMockRecorder) CreateDataUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataUser", reflect.TypeOf((*MockRepositoryAuthentication)(nil).CreateDataUser), ctx, input)
}
