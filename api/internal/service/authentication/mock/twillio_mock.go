// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/twillio.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockTwillioMessage is a mock of TwillioMessage interface
type MockTwillioMessage struct {
	ctrl     *gomock.Controller
	recorder *MockTwillioMessageMockRecorder
}

// MockTwillioMessageMockRecorder is the mock recorder for MockTwillioMessage
type MockTwillioMessageMockRecorder struct {
	mock *MockTwillioMessage
}

// NewMockTwillioMessage creates a new mock instance
func NewMockTwillioMessage(ctrl *gomock.Controller) *MockTwillioMessage {
	mock := &MockTwillioMessage{ctrl: ctrl}
	mock.recorder = &MockTwillioMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTwillioMessage) EXPECT() *MockTwillioMessageMockRecorder {
	return m.recorder
}

// SendMessage mocks base method
func (m *MockTwillioMessage) SendMessage(toUserNumber, message string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", toUserNumber, message)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockTwillioMessageMockRecorder) SendMessage(toUserNumber, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTwillioMessage)(nil).SendMessage), toUserNumber, message)
}
